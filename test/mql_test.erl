%% -*- erlang-indent-level: 2;indent-tabs-mode: nil -*-
%% ex: ts=4 sw=4 et
%%------------------------------------------------------------------------------

-module(mql_test).

-include_lib("eunit/include/eunit.hrl").

complex_test() ->
    Map = #{path => "localhost",
            body => <<>>,
            headers => [],
            code => 400,
            etag => undefined,
            user_key => ok},
    Modificators = [{ifdef, path,
                     [{set, version, 1}],
                     [{set, version, 2}]},
                    {ifeq, code, 200,
                     [{set, status, "OK"}],
                     [{without, body},
                      {ifeq, code, 400,
                       [{set, status, "malformed request"}],
                       [{set, status, "unexpected error"}]}]},
                    {ifset, body,
                     [{append, headers, {"Content-Encoding", "gzip"}},
                      {append, headers, {"Content-Type", "application/json"}}]},
                    {with, [path, body, headers, code, version, status, etag]},
                    {replace_all, undefined, null}
                   ],
    TestMap1 = mql:apply(Modificators, Map),
    ?assertMatch(#{status := "malformed request",
                   version := 1,
                   etag := null,
                   headers := []}, TestMap1),
    ?assertNot(maps:is_key(body, TestMap1)),
    ?assertNot(maps:is_key(user_key, TestMap1)),

    TestMap2 = mql:apply([{without, path} | Modificators], Map#{code => 200}),
    ?assertMatch(#{status := "OK",
                   version := 2,
                   body := <<>>,
                   headers := [{"Content-Type", "application/json"},
                               {"Content-Encoding", "gzip"}]}, TestMap2).

commands_test_() ->
    [?_test(?assertMatch(#{foo := bar}, mql:apply([{set, foo, bar}], #{}))),
     ?_test(?assertMatch(#{foo := "ok"}, mql:apply([{append, foo, $k},
                                                    {append, foo, $o}], #{}))),
     ?_test(?assertMatch(#{bar := 2},
                         mql:apply([{remove, foo}], #{foo => 1, bar => 2}))),
     ?_test(?assertMatch(#{result := true},
                         mql:apply([{ifeq, foo, bar,
                                     [{set, result, true}]}], #{foo => bar}))),
     ?_test(?assertMatch(#{result := false},
                         mql:apply([{ifeq, foo, bar,
                                     [{set, result, true}],
                                     [{set, result, false}]}], #{foo => baz}))),
     ?_test(?assertMatch(#{result := true},
                         mql:apply([{ifset, foo,
                                     [{set, result, true}],
                                     [{set, result, false}]}], #{foo => bar}))),
     ?_test(?assertMatch(#{result := false},
                         mql:apply([{ifset, foo,
                                     [{set, result, true}],
                                     [{set, result, false}]}],
                                   #{foo => undefined}))),
     ?_test(?assertMatch(#{result := false},
                         mql:apply([{ifset, foo,
                                     [{set, result, true}]}],
                                   #{foo => undefined, result => false}))),
     ?_test(?assertMatch(#{result := false},
                         mql:apply([{ifset, foo,
                                     [{set, result, true}]}],
                                   #{foo => null, result => false}))),
     ?_test(?assertMatch(#{result := true},
                         mql:apply([{ifset, foo,
                                     [{set, result, true}]}],
                                   #{foo => bar, result => false}))),
     ?_test(?assertMatch(#{result := false},
                         mql:apply([{ifset, foo,
                                     [{set, result, true}]}],
                                   #{result => false}))),
     ?_test(?assertMatch(#{result := false},
                         mql:apply([{ifdef, foo,
                                     [{set, result, true}]}],
                                   #{result => false}))),
     ?_test(?assertMatch(#{result := true},
                         mql:apply([{ifdef, foo,
                                     [{set, result, true}]}],
                                   #{foo => undefined, result => false}))),
     ?_test(?assertMatch(#{result := true},
                         mql:apply([{ifdef, foo,
                                     [{set, result, true}],
                                     [{set, result, false}]}],
                                   #{foo => undefined}))),
     ?_test(?assertMatch(#{result := false},
                         mql:apply([{ifdef, foo,
                                     [{set, result, true}],
                                     [{set, result, false}]}], #{}))),
     ?_test(?assertMatch(#{result := true},
                         mql:apply([{rename, foo, result}], #{foo => true}))),
     ?_test(?assertMatch([foo], maps:keys(mql:apply([{rename, unexisting, bar}],
                                                    #{foo => true})))),
     ?_test(?assertMatch(#{result := true},
                         mql:apply([{rename, [{foo, bar},
                                              {bar, result}]}], #{foo => true}))),
     ?_test(?assertEqual([foo],
                         maps:keys(mql:apply([{with, foo}],
                                             #{foo => 1, bar => 2})))),
     ?_test(?assertEqual([bar, foo],
                         maps:keys(mql:apply([{with, [foo, bar]}],
                                             #{foo => 1, bar => 2})))),
     ?_test(?assertEqual([bar],
                         maps:keys(mql:apply([{without, foo}],
                                             #{foo => 1, bar => 2})))),
     ?_test(?assertEqual([],
                         maps:keys(mql:apply([{without, [foo, bar]}],
                                             #{foo => 1, bar => 2})))),
     ?_test(?assertEqual([ok, ok],
                         maps:values(mql:apply([{replace_all, undefined, ok}],
                                               #{foo => undefined,
                                                 bar => undefined})))),
     ?_test(?assertEqual([ok],
                         maps:values(mql:apply([{remove_all, undefined}],
                                               #{foo => undefined, bar => ok}))))
    ].
